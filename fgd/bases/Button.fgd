@BaseClass base(Angles)
 = Button
	[
	glow[L4D2](target_destination) : "Glow Entity" : : "The name of an entity that will get the +use glow for this button."
	
	sounds[engine](integer) : "Press Sound" : 0
	sounds(choices) : "Press Sound" : 0 : "Sound played when pressed. Choose from sounds in the Buttons.snd* category." = #snippet "Buttons.snd"

	locked_sound[engine](integer) : "Locked Sound" : 0
	locked_sound(choices) : "Locked Sound" : 0 : "Sound played when the player tries to use the button, " +
		"and fails because it's locked. These are sounds in the Buttons.snd* category." = #snippet "Buttons.snd"

	unlocked_sound[engine](integer) : "Unlocked Sound" : 0
	unlocked_sound(choices) : "Unlocked Sound" : 0 : "Sound played when the button is unlocked. These are sounds in the Buttons.snd* category." = #snippet "Buttons.snd"

	locked_sentence[engine](integer) : "Locked Sentence" : 0
	locked_sentence[complete](choices) : "Locked Sentence" : 0 : "A sentence played when the player tries to use the button, and fails because it's locked." =
		[
		0: "None"
		1: "[NA] Gen. Access Denied"
		2: "[ND] Security Lockout"
		3: "[NF] Blast Door"
		4: "[NFIRE] Fire Door"
		5: "[NCHEM] Chemical Door"
		6: "[NRAD] Radiation Door"
		7: "[NCON] Gen. Containment"
		8: "[NH] Maintenance Door"
		9: "[NG] Broken Shut Door"
		]		

	unlocked_sentence[engine](integer) : "Unlocked Sentence" : 0
	unlocked_sentence[complete](choices) : "Unlocked Sentence" : 0 : "A sentence played when the button is unlocked." =
		[
		0: "None"
		1: "[EA] Gen. Access Granted"
		2: "[ED] Security Disengaged"
		3: "[EF] Blast Door"
		4: "[EFIRE] Fire Door"
		5: "[ECHEM] Chemical Door"
		6: "[ERAD] Radiation Door"
		7: "[ECON] gen. Containment"
		8: "[EH] Maintenance area"
		]

	// Inputs
	input Lock(void) : "Lock the button, preventing it from functioning."
	input Unlock(void) : "Unlock the button, allowing it to function."
	input Press(void) : "Activate the button as if it was pressed."
	input PressIn(void) : "Activate the button as if it was pressed, sending it to the bottom position."
	input PressOut(void) : "Unpress the button, sending it to the top position."

	// Outputs
	output OnDamaged(void) : "Fired when the button is damaged."
	output OnPressed(void) : "Fired when the button is pressed."
	output OnUseLocked(void) : "Fired when the button is used while locked."
	output OnIn(void) : "Fired when the button reaches the in/pressed position."
	output OnOut(void) : "Fired when the button reaches the out/released position."

	@resources
		[
		// Pack the Buttons.* sounds.
		func func_button_sounds
		]
	]
